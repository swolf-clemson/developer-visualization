import { useEffect, useRef } from "react";
import * as d3 from "d3";

// import {BarChart} from "@d3/bar-chart-transitions"

function Visualization() {
  const svgElem = useRef();

  useEffect(() => {
    var family = {
      name: "root",
      children: [
        { name: "child #1" },
        {
          name: "child #2",
          children: [
            { name: "grandchild #1" },
            { name: "grandchild #2" },
            { name: "grandchild #3" },
          ],
        },
      ],
    };

    var width = 500;
    var height = 500;

    var root = d3.hierarchy(family, (d) => {
      return d.children;
    }); //TODO: the call on the function d3.hierarchy goes here

    let layout = d3.tree().size([width - 20, height - 20]); //TODO: use root to prepare your layout with the function d3.tree()

    layout(root);

    var svg = d3
      .select("#hierarchy")
      .style("width", width)
      .style("height", height);

    // var svg = svgElem

    let bound = svg.append("g").attr("transform", `translate(10,0)`);

    let link = bound
      .insert("g")
      .attr("fill", "none")
      .attr("stroke", "#555")
      .attr("stroke-opacity", 0.4)
      .attr("stroke-width", 2)
      .selectAll("path")
      .data(root.links()) //TODO: here you have to pass the links generated by your hierarchy
      .join("path")
      .attr(
        "d",
        d3
          .linkHorizontal()
          .x((d) => d.y)
          .y((d) => d.x)
      );

    const node = bound
      .append("g")
      .selectAll("circle")
      .data(root.descendants()) //TODO: here you have to pass the descendants of your root
      .enter()
      .append("circle")
      .attr("transform", (d) => `translate(${d.y},${d.x})`)
      .attr("fill", (d) => (d.children ? "#555" : "#999"))
      .attr("r", 4);
  });

  return (
    <div>
      <p>A cool lil graph</p>
      <svg ref={svgElem} className="flex justify-center content-center" id="hierarchy"></svg>
    </div>
  );
}

export default Visualization;
